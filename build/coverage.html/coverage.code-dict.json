{"/home/travis/build/npmtest/node-npmtest-recluster/test.js":"/* istanbul instrument in package npmtest_recluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-recluster/lib.npmtest_recluster.js":"/* istanbul instrument in package npmtest_recluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_recluster = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_recluster = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-recluster/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-recluster && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_recluster */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_recluster\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_recluster.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_recluster.rollup.js'] =\n            local.assetsDict['/assets.npmtest_recluster.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_recluster.__dirname + '/lib.npmtest_recluster.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-recluster/node_modules/recluster/index.js":"var numCPUs         = require('os').cpus().length\nvar cluster         = require('cluster')\nvar EE              = require('events').EventEmitter\nvar mkBackoff       = require('./lib/backoff')\nvar mkRespawners    = require('./lib/respawners')\nvar utils           = require('./lib/util')\n\nvar isProduction = process.env.NODE_ENV == 'production';\n\n/**\n * Creates a load balancer\n * @param file          {String} path to the module that defines the server\n * @param opt           {Object} options\n * @param opt.workers   {Number} number of active workers\n * @param opt.timeout   {Number} kill timeout for old workers after reload (sec)\n * @param opt.respawn   {Number} min time between respawns when workers die\n * @param opt.backoff   {Number} max time between respawns when workers die\n * @param opt.readyWhen {String} when does the worker become ready? 'listening' or 'started'\n * @param opt.args      {Array} arguments to pass to the worker (default: [])\n * @param opt.log       {Object} what to log to stdout (default: {respawns: true})\n * @param opt.logger    {Function} logger to use, needs `log` method (default: console)\n * @return - the balancer. To run, use balancer.run() reload, balancer.reload()\n */\nmodule.exports = function(file, opt) {\n\n    opt = opt || {};\n    opt.workers = opt.workers || numCPUs;\n    opt.timeout = opt.timeout || (isProduction ? 3600 : 1);\n    opt.readyWhen = opt.readyWhen || 'listening';\n    opt.args = opt.args || [];\n    opt.log = opt.log || {respawns: true};\n\n    var logger     = opt.logger || console;\n    var backoff    = mkBackoff({respawn: opt.respawn, backoff: opt.backoff})\n    var respawners = mkRespawners()\n\n    var self = new EE();\n    var channel = new EE();\n\n    channel.setMaxListeners(opt.workers * 4 + 10);\n\n    var workers = [];\n\n    var activeWorkers = {length: opt.workers};\n    function deactivate(w) {\n        if (activeWorkers[w._rc_wid] == w) {\n            activeWorkers[w._rc_wid] = null;\n        }\n    }\n\n    function emit() {\n        channel.emit.apply(self, arguments);\n        self.emit.apply(channel, arguments);\n    }\n\n\n    var readyEvent = opt.readyWhen == 'started' ? 'online' :\n                     opt.readyWhen == 'listening' ? 'listening' :\n                     'message';\n\n    var readyCommand = 'ready';\n\n\n    // Fork a new worker. Give it a recluster ID and\n    // also redirect all its messages to the cluster.\n    function fork(wid) {\n        var w = cluster.fork({WORKER_ID: wid});\n        w._rc_wid = wid;\n        w._rc_isReplaced = false;\n        w.on('message', function(message) {\n            emit('message', w, message);\n        });\n        w.process.on('exit', function() {\n            utils.removeFrom(workers, w);\n            deactivate(w);\n        });\n        workers.push(w);\n        return w;\n    }\n\n    // Replace a dysfunctional worker\n    function workerReplace(worker) {\n        if (worker._rc_isReplaced) return;\n        worker._rc_isReplaced = true;\n\n        deactivate(worker);\n\n        var now  = Date.now()\n        var time = backoff(now)\n\n        if (opt.log.respawns) {\n            logger.log('[' + worker.process.pid + '] worker (' + worker._rc_wid\n                        + ':' + worker.id + ') must be replaced, respawning in', time);\n        }\n\n        var respawner = setTimeout(function() {\n            respawners.done(respawner);\n            fork(worker._rc_wid);\n        }, time);\n\n        respawners.add(respawner);\n\n    }\n\n    // Replace a worker that has closed the IPC channel\n    // or signaled that its dysfunctional. Will also\n    // terminate the worker after the specified time has\n    // passed.\n    function workerReplaceTimeoutTerminate(w) {\n        workerReplace(w);\n        killTimeout(w);\n    }\n\n\n    // Sets up a kill timeout for a worker. Closes the\n    // IPC channel immediately.\n    function killTimeout(worker) {\n        function trykillfn() {\n            try {\n                if (worker.kill) {\n                    worker.kill();\n                } else {\n                    worker.destroy();\n                }\n            } catch(e) {}\n        }\n\n        if (opt.timeout > 0) {\n            var timeout = setTimeout(trykillfn, opt.timeout * 1000);\n            worker.once('exit', clearTimeout.bind(this, timeout));\n            // possible leftover worker that has no channel\n            // estabilished will throw. Ignore.\n            try {\n                worker.send({cmd: 'disconnect'});\n                worker.disconnect();\n            } catch (e) { }\n        } else {\n            process.nextTick(trykillfn);\n        }\n\n        deactivate(worker);\n    }\n\n\n    // Redirect most events\n    function workerListening(w, adr) { emit('listening', w, adr); }\n    function workerOnline(w) { emit('online', w); }\n    function workerDisconnect(w) { emit('disconnect', w); }\n    function workerEmitExit(w) { emit('exit', w); }\n\n    self.run = function() {\n        if (!cluster.isMaster) return;\n        cluster.setupMaster({exec: file});\n        cluster.settings.args = opt.args;\n        for (var i = 0; i < opt.workers; i++) fork(i);\n\n        cluster.on('exit', workerEmitExit);\n        cluster.on('disconnect', workerDisconnect);\n        cluster.on('listening', workerListening);\n        cluster.on('online', workerOnline);\n\n        channel.on(readyEvent, function workerReady(w, arg) {\n            // ignore unrelated messages when readyEvent = message\n            if (readyEvent === 'message'\n                && (!arg || arg.cmd != readyCommand)) return;\n            emit('ready', w, arg);\n        });\n        // When a worker exits, try to replace it\n        channel.on('exit', workerReplace);\n        // When it closes the IPC channel or signals that it can no longer\n        // do any processing, replace it and then set up a termination timeout\n        channel.on('disconnect', workerReplaceTimeoutTerminate);\n        channel.on('message', function workerDisconnectMsg(w, arg) {\n            if (arg && arg.cmd === 'disconnect')\n                workerReplaceTimeoutTerminate(w);\n        });\n        // When a worker becomes ready, add it to the active list\n        channel.on('ready', function workerReady(w) {\n            activeWorkers[w._rc_wid] = w;\n        })\n\n    }\n\n\n    self.reload = function(cb) {\n        if (!cluster.isMaster) return;\n        respawners.cancel();\n        function allReady(cb) {\n            var listenCount = opt.workers;\n            var self = this;\n            return function(w, arg) {\n                if (!--listenCount) cb.apply(self, arguments);\n            };\n        }\n\n        workers.forEach(function(worker) {\n            var id = worker.id;\n\n            var stopOld = allReady(function() {\n                // dont respawn this worker. It has already been replaced.\n                worker._rc_isReplaced = true;\n\n                // Kill the worker after the appropriate timeout has passed\n                killTimeout(worker);\n                channel.removeListener('ready', stopOld);\n            });\n\n            channel.on('ready', stopOld);\n        });\n        if (cb) {\n            var allReadyCb = allReady(function() {\n                channel.removeListener('ready', allReadyCb);\n                cb();\n            });\n            channel.on('ready', allReadyCb);\n        }\n        for (var i = 0; i < opt.workers; ++i) fork(i);\n    };\n\n    self.terminate = function(cb) {\n        self.stop()\n        cluster.on('exit', allDone);\n        workers.forEach(function (worker) {\n            if (worker.kill)\n                worker.kill('SIGKILL');\n            else\n                worker.destroy();\n        });\n        allDone()\n        function allDone() {\n            var active = Object.keys(cluster.workers).length\n            if (active === 0) {\n                cluster.removeListener('exit', allDone);\n                cb && cb();\n            }\n        }\n    }\n\n    self.stop = function() {\n        if (!cluster.isMaster) return;\n        cluster.removeListener('exit', workerEmitExit);\n        cluster.removeListener('disconnect', workerDisconnect);\n        cluster.removeListener('listening', workerListening);\n        cluster.removeListener('online', workerOnline);\n        respawners.cancel();\n\n        channel.removeAllListeners();\n    }\n\n    self.workers = function() {\n        return workers;\n    }\n\n    self.activeWorkers = function() {\n        return activeWorkers;\n    }\n\n    return self;\n};\n","/home/travis/build/npmtest/node-npmtest-recluster/node_modules/recluster/lib/backoff.js":"module.exports = function(opt) {\n\n    var optrespawn      = opt.respawn || 1;\n    var backoffTimer    = null;\n    var lastSpawn       = Date.now();\n\n\n    function delayedDecreaseBackoff() {\n        if (backoffTimer)\n            clearTimeout(backoffTimer);\n\n        backoffTimer = setTimeout(function() {\n\n            backoffTimer    = null;\n            optrespawn      = optrespawn / 2;\n\n            if (optrespawn <= opt.respawn)\n                optrespawn = opt.respawn;\n            else\n                delayedDecreaseBackoff();\n\n        }, opt.backoff * 1000);\n    }\n\n    function getRespawnTime(now) {\n        if (opt.backoff)\n            optrespawn = Math.min(optrespawn, opt.backoff);\n\n        var nextSpawn   = Math.max(now, lastSpawn + optrespawn * 1000),\n            time        = nextSpawn - now;\n            lastSpawn   = nextSpawn;\n\n        // Exponential backoff.\n        if (opt.backoff) {\n            optrespawn *= 2;\n            delayedDecreaseBackoff();\n        }\n\n        return time;\n    }\n\n    return getRespawnTime;\n}","/home/travis/build/npmtest/node-npmtest-recluster/node_modules/recluster/lib/respawners.js":"module.exports = function() {\n    var items = [];\n    var self = {};\n    self.cancel = function() {\n        items.forEach(function(item) {\n            clearTimeout(item);\n        });\n        items = [];\n    };\n    self.add = function(t) {\n        items.push(t);\n    };\n    self.done = function(t) {\n        items.splice(items.indexOf(t), 1);\n    };\n    return self;\n}","/home/travis/build/npmtest/node-npmtest-recluster/node_modules/recluster/lib/util.js":"exports.removeFrom = removeFrom;\n\nfunction removeFrom(list, item) {\n    var index = list.indexOf(item)\n    if (index >= 0) list.splice(index, 1)\n}\n"}